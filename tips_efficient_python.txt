https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9

-Use joins for adding items onto lists
Instead of adding line1, line2 to mymsg individually, use list and join.
Don’t do this:
mymsg=’line1\n’
mymsg+=’line2\n’
Better choice:
mymsg=[‘line1’,’line2']
‘\n’.join(mymsg)

-Avoid using the + operator for strings
Don’t use the + operator for concatenation if you can avoid it. Because strings are immutable, every time you add an element to a string, Python creates a new string and a new address. This means that new memory needs to be allocated each time the string is altered.
Don’t do this:
msg=’hello’+mymsg+’world’
Better choice:
msg=’hello %s world’ % mymsg

-Use Generators
Generators allow you to create a function that returns one item at a time rather than all the items at once. This means that if you have a large dataset, you don’t have to wait for the entire dataset to be accessible.
def __iter__(self):
     return self._generator()
def _generator(self):
     for itm in self.items():
         yield itm
         
-Put evaluations outside the loop
If you are iterating through data, you can use the cached version of the regex.
match_regex=re.compile(“foo|bar”)
for i in big_it:
     m = match_regex.search(i)
         ….
         
-Assign a function to a local variable
Python accesses local variables much more efficiently than global variables. Assign functions to local variables then use them.
myLocalFunc=myObj.func
for i in range(n):
    myLocalFunc(i)
    
-Use built-in functions and libraries
Use built-in functions and libraries whenever you can. Built-in functions are often implemented using the best memory usage practices.
Don’t do this:
mylist=[]
for myword in oldlist:
      mylist.append(myword.upper())
Better choice:
mylist=map(str.lower, oldlist)
Better choice for creating a dataset with keyword arguments than loops:
mycounter = Counter (a = 1, b = 2, c = 3, d = 5, e = 6, f = 7, g = 8)
for i in mycounter.elements():   
 
-Getting rid of unwanted loops by using itertools
itertools saves you a lot of time on loops. It also gets rid of the complexity of the code.
Don’t do this:
mylist=[]
for shape in [True, False]:
     for weight in (1, 5):
          firstlist=firstlist+function(shape, weight)
Better choice:
from itertools import product, chain
list(chain.from_iterable(function(shape, weight) for weight, shape in product([True, False], range(1, 5))))

-Overwriting the _new_ and exploiting metaclasses for safety and memory management— by @maxwell flitton
Overwriting the __new__ and exploiting metaclasses to also be useful and safe for memory management when it comes to enforcing Singleton and Flyweight patterns. For instance, here’s an example of a dict object that reads a Yaml file. Because it’s meta class is a singleton design pattern once it’s defined, it can be imported anywhere in the system and defined again and the interpreter will just point to the initial object. It reduces the memory footprint and ensures safety. No matter how junior another developer is on the team, they will not cause duplicate objects, preventing them altering the dict in one part of the system and referencing a different dict in another part.
class Singleton(type):
 _instances = {}
 def __call__(cls, *args, **kwargs):
 if cls not in cls._instances:
 cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
 return cls._instances[cls]
class ConfigDict(dict, metaclass=Singleton):
 def __init__(self):
 super().__init__(self.read_config_file())
 @staticmethod
 def read_config_file():
 “””
 Reads config file based on path passed when running app.
 :return: (dict) loaded data from yml file
 “””
 config_file_path = sys.argv[-1]
 if not config_file_path.endswith(“.yml”):
 raise ConfigDictError(message=”yml file not passed into flask app but {} instead”.format(config_file_path))
 return yaml.load(open(str(config_file_path)), Loader=yaml.FullLoader)
 
 
- How to check for performance in Python code
You can use the profiling modules such as cProfile and Profile for performance checks.
python -m cProfile [-o output_file][-s sort_order](-m module | myscript.py)
Check out this article running through the entire process of benchmarking to check for the best way to reverse a string.
